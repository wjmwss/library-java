plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.protobuf' version '0.9.2'
}

version = projectVersion

bootJar.enabled = false
jar.enabled = false

allprojects {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply from: getRootDir().getAbsolutePath() + "/dependencies.gradle"

    repositories {
        mavenLocal()
        maven {
            credentials {
                username projectNexusUsername
                password projectNexusPassword
            }
            url = projectNexusUrl
            allowInsecureProtocol = true
        }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "${spring_cloud_bom}"
            mavenBom "${openfeign_bom}"
            mavenBom "${reactor_bom}"
            mavenBom "${sa_token_bom}"
            mavenBom "${docker_bom}"
            mavenBom "${protobuf_bom}"
            mavenBom "${jackson_bom}"
        }
    }

    dependencies {
        // tool
        compileOnly("$lombok")
        annotationProcessor("$lombok")

        // test
        testImplementation("$junit")
        testImplementation("$jmh_core")
        testImplementation("$spring_boot_test")
        testCompileOnly("$lombok")
        testAnnotationProcessor("$lombok")
        testAnnotationProcessor("$jmh_generator_annprocess")
    }

//    idea.module {
//        downloadJavadoc = true
//        downloadSources = true
//    }

    //  编译、打包时跳过测试(TODO 未解决，要实现打包时不测试，但能手动测试，加了这个不能手动测试了)
    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.contains("test")) {
                task.enabled = false
            }
        }
    }

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = projectCharset
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = projectCharset
    }

    task cleanAll(type: Delete) {
        delete "${projectDir}/build"
        delete "${projectDir}/out"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set("javadoc")
        from javadoc.destinationDir
    }
}
