import org.codehaus.groovy.runtime.GStringImpl

ext {
    // version
    spring_cloud_bom_version = "2022.0.4"
    openfeign_bom_version = "12.2"
    reactor_bom_version = "2022.0.7"
    sa_token_bom_version = "1.34.0"
    docker_bom_version = "3.3.0"
    protobuf_bom_version = "3.22.0"
    jackson_bom_version = "2.15.0"
    okhttps_version = "4.0.1"
    okhttp_version = "3.0.0"
    hsweb_version = "4.0.14"
    druid_version = "1.2.8"
    mysql_version = "8.0.32"
    postgresql_version = "42.5.1"
    lettuce_version = "6.2.4.RELEASE"
    redisson_version = "3.23.5"
    mybatis_flex_version = "1.7.0"
    mybatis_plus_version = "3.5.3.1"
    mybatis_plus_join_version = "1.4.2.2"
    knife4j_version = "4.3.0"
    easyexcel_version = "3.1.5"
    yitter_id_generator_version = "1.0.6"
    grpc_protoc_gen_grpc_java_version = "1.53.0"
    burningwave_version = "12.62.5"
    lombok_version = "1.18.22"
    lombok_mapstruct_binding_version = "0.2.0"
    mapstruct_version = "1.5.2.Final"
    generic_enums_version = "0.4"
    auto_service_version = "1.0.1"
    vavr_version = "0.10.4"
    guava_version = "31.1-jre"
    hutool_version = "5.8.22"
    vjtools_vjkit_version = "1.0.8"
    fastjson_version = "1.2.79"
    json_path_version = "2.7.0"
    reflectasm_version = "1.11.9"
    locationtech_version = "1.19.0"
    javax_el_version = "2.2.6"
    javax_el_api_version = "3.0.0"
    caffeine_version = "3.1.6"
    apache_commons_lang3_version = "3.12.0"
    apache_commons_io_version = "2.11.0"
    apache_commons_pool_version = "2.11.1"
    junit_version = "4.13.2"
    jmh_version = "1.35"

    // project name
    library_java_container_docker = ":container:container-docker"
    library_java_container_kubernetes_fabric8 = ":container:container-kubernetes:kubernetes-fabric8"

    library_java_concurrent_actor = ":concurrent:concurrent-actor"
    library_java_concurrent_redisson = ":concurrent:concurrent-redisson"

    library_java_quality_check_style = ":quality:quality-check-style"

    library_java_security_hsweb = ":security:security-hsweb"
    library_java_security_sa_token = ":security:security-sa-token"
    library_java_security_sa_token_spring_webmvc = ":security:security-sa-token-spring-webmvc"
    library_java_security_sa_token_spring_webflux = ":security:security-sa-token-spring-webflux"

    library_java_contract_cache_caffeine = ":contract:contract-cache-caffeine"
    library_java_contract_cache_redis = ":contract:contract-cache-redis"
    library_java_contract_constant = ":contract:contract-constant"
    library_java_contract_message_bus = ":contract:contract-message-bus"
    library_java_contract_model = ":contract:contract-model"
    library_java_contract_throwable = ":contract:contract-throwable"
    library_java_contract_tool_expression = ":contract:contract-tool-expression"

    library_java_gateway_spring_cloud = ":gateway:gateway-spring-cloud"

    library_java_message_bus_kafka = ":message-bus:message-bus-kafka"
    library_java_message_bus_redis = ":message-bus:message-bus-redis"

    library_java_orm_hsweb = ":orm:orm-hsweb"
    library_java_orm_mybatis_flex = ":orm:orm-mybatis-flex"
    library_java_orm_mybatis_plus = ":orm:orm-mybatis-plus"

    library_java_tool_constant = ":tool:tool-constant"
    library_java_tool_convert_all = ":tool:tool-convert:convert-all"
    library_java_tool_convert_fastjson = ":tool:tool-convert:convert-fastjson"
    library_java_tool_convert_jackson = ":tool:tool-convert:convert-jackson"
    library_java_tool_convert_mapstruct = ":tool:tool-convert:convert-mapstruct"
    library_java_tool_convert_spring = ":tool:tool-convert:convert-spring"
    library_java_tool_excel_alibaba_easy_excel = ":tool:tool-excel:excel-alibaba-easy-excel"
    library_java_tool_spring_common = ":tool:tool-spring:tool-spring-common"
    library_java_tool_spring_webmvc = ":tool:tool-spring:tool-spring-webmvc"
    library_java_tool_spring_webflux = ":tool:tool-spring:tool-spring-webflux"
    library_java_tool_expression_all = ":tool:tool-expression:expression-all"
    library_java_tool_expression_spring = ":tool:tool-expression:expression-spring"
    library_java_tool_geometry_common = ":tool:tool-geometry:geometry-common"
    library_java_tool_geometry_jackson = ":tool:tool-geometry:geometry-jackson"
    library_java_tool_geometry_mybatis_plus = ":tool:tool-geometry:geometry-mybatis-plus"
    library_java_tool_hack_jdk = ":tool:tool-hack:hack-jdk"
    library_java_tool_id_snowflake = ":tool:tool-id:id-snowflake"
    library_java_tool_lang = ":tool:tool-lang"
    library_java_tool_log = ":tool:tool-log"
    library_java_tool_throwable_spring_webmvc_redisson = ":tool:tool-throwable:throwable-spring-webmvc-redisson"
    library_java_tool_throwable_spring_webmvc_sa_token = ":tool:tool-throwable:throwable-spring-webmvc-sa-token"

    library_java_web_okhttps = ":web:web-okhttps"
    library_java_web_openfeign_common = ":web:web-openfeign:openfeign-common"
    library_java_web_openfeign_okhttp = ":web:web-openfeign:openfeign-okhttp"

    library_java_cache_all = ":cache:cache-all"
    library_java_cache_caffeine = ":cache:cache-caffeine"
    library_java_cache_contract = ":cache:cache-contract"
    library_java_cache_map = ":cache:cache-map"
    library_java_cache_redis = ":cache:cache-redis"

    library_java_doc_knife4j = ":doc:doc-knife4j"

    library_java_protocol_protobuf = ":protocol:protocol-protobuf"

    // framework
    spring_context = "org.springframework:spring-context"
    spring_web = "org.springframework:spring-web"
    spring_data_commons = "org.springframework.data:spring-data-commons"
    spring_boot = "org.springframework.boot:spring-boot-starter"
    spring_boot_webmvc = "org.springframework.boot:spring-boot-starter-web"
    spring_boot_webflux = "org.springframework.boot:spring-boot-starter-webflux"
    spring_boot_aop = "org.springframework.boot:spring-boot-starter-aop"
    spring_boot_logging = "org.springframework.boot:spring-boot-starter-logging"
    spring_boot_jdbc = "org.springframework.boot:spring-boot-starter-data-jdbc"
    spring_boot_configuration_processor = "org.springframework.boot:spring-boot-configuration-processor"
    spring_boot_actuator = "org.springframework.boot:spring-boot-starter-actuator"
    spring_cloud_bom = "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_bom_version}" as GStringImpl
    spring_cloud_gateway = "org.springframework.cloud:spring-cloud-starter-gateway"
    spring_cloud_openfeign = "org.springframework.cloud:spring-cloud-starter-openfeign"
    spring_cloud_kubernetes_fabric8_all = "org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-all"
    spring_cloud_stream = "org.springframework.cloud:spring-cloud-stream"
    spring_cloud_stream_kafka = "org.springframework.cloud:spring-cloud-starter-stream-kafka"
    hsweb_authorization_basic = "org.hswebframework.web:hsweb-authorization-basic:${hsweb_version}" as GStringImpl
    hsweb_commons_crud = "org.hswebframework.web:hsweb-commons-crud:${hsweb_version}" as GStringImpl
    reactor_bom = "io.projectreactor:reactor-bom:${reactor_bom_version}" as GStringImpl
    // TODO wjm 之所以指定该版本而不是使用 bom 来管理，是因为sa token bom 接管版本后，里面的 lettuce 包使用到的 reactor-core 包版本过低导致不兼容，后续升级 sa token 版本后看看是否可以解决
    reactor_core = "io.projectreactor:reactor-core:3.5.3"

    // network
    openfeign_bom = "io.github.openfeign:feign-bom:${openfeign_bom_version}" as GStringImpl
    openfeign_okhttp = "io.github.openfeign:feign-okhttp"
    okhttps_jackson = "cn.zhxu:okhttps-jackson:${okhttps_version}" as GStringImpl
    // required dependencies for okHttps
    okhttp_okio = "com.squareup.okio:okio:${okhttp_version}" as GStringImpl

    // database
    mysql = "com.mysql:mysql-connector-j:${mysql_version}" as GStringImpl
    postgresql = "org.postgresql:postgresql:${postgresql_version}" as GStringImpl

    // cache
    lettuce = "io.lettuce:lettuce-core:${lettuce_version}" as GStringImpl
    caffeine = "com.github.ben-manes.caffeine:caffeine:${caffeine_version}" as GStringImpl
    redisson = "org.redisson:redisson-spring-boot-starter:${redisson_version}" as GStringImpl

    // pool
    druid = "com.alibaba:druid-spring-boot-starter:${druid_version}" as GStringImpl
    apache_commons_pool = "org.apache.commons:commons-pool2:${apache_commons_pool_version}" as GStringImpl

    // orm
    mybatis_flex = "com.mybatis-flex:mybatis-flex-spring-boot-starter:${mybatis_flex_version}" as GStringImpl
    mybatis_plus = "com.baomidou:mybatis-plus-boot-starter:${mybatis_plus_version}" as GStringImpl
    mybatis_plus_join = "com.github.yulichang:mybatis-plus-join:${mybatis_plus_join_version}" as GStringImpl
    data_r2dbc = "org.springframework.boot:spring-boot-starter-data-r2dbc"

    // doc
    knife4j = "com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter:${knife4j_version}" as GStringImpl

    // security
    sa_token_bom = "cn.dev33:sa-token-dependencies:${sa_token_bom_version}" as GStringImpl
    sa_token = "cn.dev33:sa-token-spring-boot-starter"
    sa_token_reactor = "cn.dev33:sa-token-reactor-spring-boot-starter"
    sa_token_jwt = "cn.dev33:sa-token-jwt"
    sa_token_temp_jwt = "cn.dev33:sa-token-temp-jwt"
    sa_token_dao_redis_jackson = "cn.dev33:sa-token-dao-redis-jackson"
    sa_token_alone_redis = "cn.dev33:sa-token-alone-redis"
    sa_token_jakata_servlet = "cn.dev33:sa-token-jakarta-servlet"

    // component
    easyexcel = "com.alibaba:easyexcel:${easyexcel_version}" as GStringImpl
    yitter_id_generator = "com.github.yitter:yitter-idgenerator:${yitter_id_generator_version}" as GStringImpl
    docker_bom = "com.github.docker-java:docker-java-bom:${docker_bom_version}" as GStringImpl
    docker_java_core = "com.github.docker-java:docker-java-core"
    docker_java_transport_httpclient5 = "com.github.docker-java:docker-java-transport-httpclient5"
    docker_compose = "org.springframework.boot:spring-boot-docker-compose"

    // protocol
    // protobuf_bom = "com.google.protobuf:protobuf-bom:${protobuf_bom_version}" as GStringImpl
    // protobuf_java = "com.google.protobuf:protobuf-java"
    // protobuf_protoc = "com.google.protobuf:protoc:${protobuf_bom_version}" as GStringImpl
    // grpc_protoc_gen_grpc_java = "io.grpc:protoc-gen-grpc-java:${grpc_protoc_gen_grpc_java_version}" as GStringImpl

    // hack
    burningwave_core = "org.burningwave:core:${burningwave_version}" as GStringImpl

    // tool
    lombok = "org.projectlombok:lombok:${lombok_version}" as GStringImpl
    lombok_mapstruct_binding = "org.projectlombok:lombok-mapstruct-binding:${lombok_mapstruct_binding_version}" as GStringImpl
    mapstruct = "org.mapstruct:mapstruct:${mapstruct_version}" as GStringImpl
    mapstruct_processor = "org.mapstruct:mapstruct-processor:${mapstruct_version}" as GStringImpl
    mybatis_flex_processor = "com.mybatis-flex:mybatis-flex-processor:${mybatis_flex_version}" as GStringImpl
    generic_enums_annotations = "io.github.cmoine:generic-enums-annotations:${generic_enums_version}" as GStringImpl
    generic_enums_processor = "io.github.cmoine:generic-enums-processor:${generic_enums_version}" as GStringImpl
    auto_service = "com.google.auto.service:auto-service:${auto_service_version}" as GStringImpl
    auto_service_annotations = "com.google.auto.service:auto-service-annotations:${auto_service_version}" as GStringImpl
    vavr = "io.vavr:vavr:${vavr_version}" as GStringImpl
    guava = "com.google.guava:guava:${guava_version}" as GStringImpl
    hutool = "cn.hutool:hutool-all:${hutool_version}" as GStringImpl
    vjtools = "com.vip.vjtools:vjkit:${vjtools_vjkit_version}" as GStringImpl
    fastjson = "com.alibaba:fastjson:${fastjson_version}" as GStringImpl
    jackson_bom = "com.fasterxml.jackson:jackson-bom:${jackson_bom_version}" as GStringImpl
    jackson_core = "com.fasterxml.jackson.core:jackson-core"
    jackson_databind = "com.fasterxml.jackson.core:jackson-databind"
    jackson_annotation = "com.fasterxml.jackson.core:jackson-annotations"
    json_path = "com.jayway.jsonpath:json-path:${json_path_version}" as GStringImpl
    reflectasm = "com.esotericsoftware:reflectasm:${reflectasm_version}" as GStringImpl
    hibernate_validator = "org.hibernate.validator:hibernate-validator"
    locationtech_jts_core = "org.locationtech.jts:jts-core:${locationtech_version}" as GStringImpl
    javax_el = "org.glassfish.web:javax.el:${javax_el_version}" as GStringImpl
    javax_el_api = "javax.el:javax.el-api:${javax_el_api_version}" as GStringImpl
    apache_commons_lang3 = "org.apache.commons:commons-lang3:${apache_commons_lang3_version}" as GStringImpl
    apache_commons_io = "commons-io:commons-io:${apache_commons_io_version}" as GStringImpl
    spring_expression = "org.springframework:spring-expression"

    // test
    junit = "junit:junit:${junit_version}" as GStringImpl
    jmh_core = "org.openjdk.jmh:jmh-core:${jmh_version}" as GStringImpl
    jmh_generator_annprocess = "org.openjdk.jmh:jmh-generator-annprocess:${jmh_version}" as GStringImpl
    spring_boot_test = "org.springframework.boot:spring-boot-starter-test"
}
